import streamlit as st
import requests

# ----------------------------
# Archetyp-Profile
# ----------------------------
archetypes = {
    "tribal": {"creatures": 35, "ramp": 12, "draw": 8, "removal": 6, "lands": 36, "wincon": 3},
    "landfall": {"creatures": 20, "ramp": 15, "draw": 8, "removal": 6, "lands": 40, "wincon": 5},
    "tokens": {"creatures": 20, "ramp": 10, "draw": 10, "removal": 6, "lands": 36, "wincon": 8},
    "spellslinger": {"creatures": 12, "ramp": 12, "draw": 15, "removal": 6, "lands": 34, "wincon": 6},
    "artifacts": {"creatures": 18, "ramp": 15, "draw": 10, "removal": 6, "lands": 36, "wincon": 5},
    "lifegain": {"creatures": 25, "ramp": 10, "draw": 10, "removal": 8, "lands": 36, "wincon": 5},
    "voltron": {"creatures": 10, "ramp": 8, "draw": 8, "removal": 8, "lands": 36, "wincon": 10},
    "default": {"creatures": 25, "ramp": 10, "draw": 10, "removal": 8, "lands": 37, "wincon": 5}
}

# ----------------------------
# Hilfsfunktionen
# ----------------------------
def get_card_info(card_name):
    url = f"https://api.scryfall.com/cards/named?fuzzy={card_name}"
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()
    return None

def detect_archetype(commander_info):
    text = (commander_info.get("type_line", "") + " " + commander_info.get("oracle_text", "")).lower()
    tribes = ["elf", "zombie", "goblin", "dragon", "soldier", "sliver", "vampire", "merfolk"]
    if any(t in text for t in tribes):
        return "tribal"
    if "landfall" in text or ("land" in text and "enters the battlefield" in text):
        return "landfall"
    if "create" in text and "token" in text:
        return "tokens"
    if "instant" in text or "sorcery" in text:
        return "spellslinger"
    if "artifact" in text:
        return "artifacts"
    if "gain life" in text or "whenever you gain life" in text:
        return "lifegain"
    if "whenever" in text and ("attacks" in text or "deals combat damage" in text):
        return "voltron"
    return "default"

def detect_function(card):
    text = (card.get("oracle_text") or "").lower()
    type_line = card.get("type_line", "").lower()
    if "land" in type_line:
        return "lands"
    if "add {m" in text or "search your library for a land" in text:
        return "ramp"
    if "draw a card" in text:
        return "draw"
    if "destroy" in text or "exile target" in text or "sacrifice" in text:
        return "removal"
    if "you win the game" in text or "extra turn" in text:
        return "wincon"
    return "creatures" if "creature" in type_line else "other"

def build_deck(commander, pool):
    commander_info = get_card_info(commander)
    if not commander_info:
        return []

    archetype = detect_archetype(commander_info)
    profile = archetypes.get(archetype, archetypes["default"])
    st.write(f"### Erkannter Archetyp: {archetype.capitalize()}")

    tribe = None
    if archetype == "tribal":
        for t in ["Elf", "Zombie", "Goblin", "Dragon", "Soldier", "Sliver", "Vampire", "Merfolk"]:
            if t.lower() in commander_info["type_line"].lower():
                tribe = t
                st.write(f"**Tribe erkannt:** {tribe}")
                break

    categorized = {slot: [] for slot in profile}
    for card in pool:
        role = detect_function(card)
        if role in categorized:
            categorized[role].append(card)

    deck = [commander_info]
    chosen = []
    for role, count in profile.items():
        cards = categorized.get(role, [])
        if role == "creatures" and tribe:
            tribe_cards = [c for c in cards if tribe.lower() in c.get("type_line", "").lower()]
            chosen.extend(tribe_cards[:count])
            if len(tribe_cards) < count:
                chosen.extend(cards[:(count - len(tribe_cards))])
        else:
            chosen.extend(cards[:count])
    return deck + chosen[:99]

# ----------------------------
# Streamlit UI
# ----------------------------
st.set_page_config(page_title="MTG Commander Deckbuilder", layout="wide")
st.title("ðŸ§™ Magic: The Gathering â€“ Commander Deckbuilder v0.6")
st.markdown("Gib deinen Commander ein, lade deine Moxfield Collection hoch und baue ein Deck.")

commander = st.text_input("Commander Name:", "Omnath, Locus of Rage")
uploaded = st.file_uploader("Moxfield Collection (Text)")

# Button immer sichtbar
if st.button("Deck bauen"):
    pool = []
    if uploaded is not None:
        for line in uploaded:
            card_name = line.decode("utf-8").strip()
            info = get_card_info(card_name)
            if info:
                pool.append(info)
    deck = build_deck(commander, pool)
    if deck:
        st.success(f"Deck mit {len(deck)} Karten gebaut!")
        for card in deck:
            st.write(f"- {card['name']}")
    else:
        st.error("Commander nicht gefunden oder Deck konnte nicht gebaut werden.")
